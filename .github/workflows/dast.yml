name: Build and DAST

#:[.'.]:>-------------------------------------
#:[.'.]:> Evento que dispara el workflow
#:[.'.]:> Se ejecuta en cada push a las ramas master y non-existent-branch
#:[.'.]:>-------------------------------------
on:
  push:
    branches: [ non-existent-branch, master ]

jobs:
  build:
    name: Build and DAST
    runs-on: ubuntu-latest

    #:[.'.]:>-------------------------------------
    #:[.'.]:> Servicio de PostgreSQL
    #:[.'.]:> Configura un contenedor de PostgreSQL para pruebas
    #:[.'.]:>-------------------------------------
    services:
      markitos-common-postgres:
        image: postgres:16
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: markitos-svc-boilerplates
        ports:
          - 5432:5432
        options: >-
          --name markitos-common-postgres
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      #:[.'.]:>-------------------------------------
      #:[.'.]:> Clona el repositorio
      #:[.'.]:>-------------------------------------
      - name: Checkout code
        uses: actions/checkout@v3

      #:[.'.]:>-------------------------------------
      #:[.'.]:> Construye la imagen Docker
      #:[.'.]:>-------------------------------------
      - name: Build Docker image
        run: |
          docker build -t markitos-svc-boilerplates:${{ github.sha }} .
        env:
          VERSION: ${{ github.sha }}

      #:[.'.]:>-------------------------------------
      #:[.'.]:> Espera a que PostgreSQL esté listo
      #:[.'.]:>-------------------------------------
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec markitos-common-postgres pg_isready -U admin > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL did not become ready in time."
          exit 1

      #:[.'.]:>-------------------------------------
      #:[.'.]:> Ejecuta la imagen Docker
      #:[.'.]:>-------------------------------------
      - name: Run Docker image
        run: |
          docker run --rm \
            --name markitos-svc-boilerplates \
            --network markitos-svc-boilerplates_default \
            -e DATABASE_DSN="host=markitos-common-postgres user=admin password=admin dbname=markitos-svc-boilerplates sslmode=disable" \
            -e HTTP_SERVER_ADDRESS=":3000" \
            -e GRPC_SERVER_ADDRESS=":30000" \
            -p 3000:3000 \
            -p 30000:30000 \
            markitos-svc-boilerplates:${{ github.sha }}

      #:[.'.]:>-------------------------------------
      #:[.'.]:> Espera a que la aplicación esté lista
      #:[.'.]:>-------------------------------------
      - name: Wait for application to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Application is ready!"
              exit 0
            fi
            echo "Waiting for application to be ready..."
            sleep 2
          done
          echo "Application did not become ready in time."
          exit 1

      #:[.'.]:>-------------------------------------
      #:[.'.]:> Ejecuta análisis DAST con ZAP
      #:[.'.]:>-------------------------------------
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://localhost:3000'