name: Run API and Perform DAST

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  dast:
    name: Run API and Perform DAST
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: markitos-svc-boilerplates
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Verify PostgreSQL connection
        run: |
          echo "Verificando conexión a PostgreSQL..."
          PGPASSWORD=admin pg_isready -h localhost -p 5432 -U admin || echo "Error conectando a PostgreSQL"
          PGPASSWORD=admin psql -h localhost -p 5432 -U admin -d markitos-svc-boilerplates -c "SELECT version();" || echo "Error ejecutando consulta SQL"

      - name: Install dependencies
        run: |
          go mod download

      - name: Test PostgreSQL connection directly
        run: |
          echo "Probando conexión directa con psql:"
          PGPASSWORD=admin psql -h localhost -p 5432 -U admin -d markitos-svc-boilerplates -c "SELECT current_user, current_database();"

      - name: Create database directly
        run: |
          echo "Creando base de datos directamente con psql:"
          PGPASSWORD=admin psql -h localhost -p 5432 -U admin -d postgres -c "DROP DATABASE IF EXISTS \"markitos-svc-boilerplates\";"
          PGPASSWORD=admin psql -h localhost -p 5432 -U admin -d postgres -c "CREATE DATABASE \"markitos-svc-boilerplates\";"
          echo "Base de datos creada correctamente."

      - name: Debug PostgreSQL container
        run: |
          docker ps
          docker logs $(docker ps -q --filter "name=postgres")

      - name: Run API
        run: make run &
        env:
          DATABASE_DSN: "host=localhost user=admin password=admin dbname=markitos-svc-boilerplates sslmode=disable"
          PGUSER: admin
          PGPASSWORD: admin
          PGHOST: localhost
          PGDATABASE: markitos-svc-boilerplates

      - name: Perform DAST
        run: |
          echo "Realizando análisis DAST..."
          # Aquí puedes usar herramientas como OWASP ZAP o cualquier otra herramienta DAST
          # Ejemplo con OWASP ZAP:
          docker run -v $(pwd):/zap/wrk:rw -t owasp/zap2docker-stable zap-baseline.py -t http://localhost:3000 -r report.html